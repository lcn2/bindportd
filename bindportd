#!/usr/bin/perl -wT
#
# bindportd - bind to tcp or udp ports
#
# usage:
#	bindportd [-b] [-c] [-h] [-i] [-s] [-v] [-w] portset
#
#	-b	(ignored, always forks into background)
#	-c	pre-close all open files (except STDOUT/STDERR if also -v)
#	-h	print a usage message
#	-i	silently ignore binding to privileged ports (port <= 1023)
#	-s	block all blockable signals
#	-w	(ignored, forked children always wait forever after binding)
#	-v	verbose
#	portset	(see below)
#
# The port.set file contains lines of the form:
#
#	# comment are ignored
#	# blank lines are ignored
#
#	proto/port	# comments on the end of a line are ignored
#
#	proto	tcp, udp, reserve-tcp, reserve-udp
#	port	port number
#
# @(#) $Revision: 1.15 $
# @(#) $Id: bindportd,v 1.15 2004/05/21 14:37:44 chongo Exp $
# @(#) $Source: /usr/local/src/sbin/bindport/RCS/bindportd,v $
#
# Copyright (c) 2000-2004 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#	supporting documentation
#	source copies
#	source works derived from this source
#	binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo <was here> /\oo/\
#
# Share and enjoy!

# NOTE: Executing the following command:
#
#	bindportd -i -s /etc/sysconfig/bindport
#
# right after the network is started (see /etc/rc.d/init.d/network) is useful
# as it grabs and holds on to ports that are often the subject of system
# crackers and other network attacks.
#
# Even if you are behind router, packet filter or ipchain control where the
# inbound and/or outbound packets to certain ports are blocked, system and
# user applications may still try to bind to these ports.  If your application
# is unlucky enough to pick one if these blocked ports, it will appear that
# the network is dead or non-responsive.
#
# Applications may try to bind to blocks ports perfect valid reasons.
# It is perfectly reasonable for a program to use almost any random unused
# privileged port.  In fact there are facilities where an application
# will ask for any random, unprivileged and unused port on which to listen
# or make connections.	Such applications have no way of knowing that the
# router/packet filter/ipchain will block them.
#
# WARNING: The above port list may not be complete.  It may also contain
#	   services that you want to use (such as socks).  Just the command
#	   to suit your needs and current network attacks.

# The program will exit 0 if it was able to bind and close all of the
# ports successfully.  Otherwise it will exit non-zero.	 By using -c,
# one ensures that no error messages will be printed.


# requirements
#
use strict;
use bytes;
use Socket;
use IO::Socket;
use IO::Handle;
use Getopt::Std;
use POSIX;
use vars qw($opt_b $opt_c $opt_h $opt_i $opt_s $opt_v $opt_w $opt_m);

# my vars
#
my @sock;	# socket objects
my $max_ports;	# max number of ports to bind per child
#
my $usage = "usage:\n" .
	"$0 [-b] [-c] [-h] [-i] [-m maxport] [-s] [-v] [-w] portset" .
	"\n" .
	"\t-b\t(option ignored, always forks in background)\n" .
	"\t-c\tclose open files after startup (except STDOUT/STDERR if -v)\n" .
	"\t-h\tprint this usage message\n" .
	"\t-i\tsilently ignore privileged ports (0 <= port <= 1023)\n" .
	"\t-m\tmax ports per child (default: 1000)\n" .
	"\t-s\tblock all blockable signals\n" .
	"\t-v\tverbose\n" .
	"\t-w\t(ignored, forked children always wait forever after binding)\n" .
	"\n" .
	"    portset is a file containing lines of the form:\n" .
	"\n" .
	"\t# comment ignored\n" .
	"\t# empty line ignored\n" .
	"\n" .
	"\tudp/portnum\t\t# comment ignored\n" .
	"\ttcp/portnum\t\t# comment ignored\n" .
	"\treserve-udp/portnum\t# comment ignored\n" .
	"\treserve-tcp/portnum\t# comment ignored\n" .
	"\twhere portnum is an integer [0,65535]\n" .
	"\tonly udp/portnum and tcp/portnum lines result in port binding\n";

# function prototypes
#
sub sig_off();
sub hold_port($$);


MAIN:
{
    my $proto_arg;	# "tcp", "udp", "reserve-udp", or "reserve-tcp"
    my $port;		# port number
    my $line;		# a line from the bindport configuration file
    my $max_ports;	# maximum number of ports we can open per process
    my $total_ports;	# total ports (udp and tcp) to bind with
    my $child_ports;	# number of ports to be given to the child
    my $ignored_tcp;	# number of ignored tcp ports due to -i
    my $ignored_udp;	# number of ignored udp ports due to -i
    my %tcp;		# tcp ports to block
    my %udp;		# udp ports to block
    my %reserve_tcp;	# tcp ports to reserve (not block)
    my %reserve_udp;	# udp ports to reserve (not block)
    my @tcp_set;	# tcp forks for the child to bind with
    my @udp_set;	# udp forks for the child to bind with
    my $cfgfile;	# bindport configuration file
    my $pid;		# parent => child pid, child => 0
    my $i;

    # setup
    #
    $max_ports = 1000;	# most Linux systems can open 1024 files per process

    # parse args
    #
    if (!getopts('bchim:svw') || !defined($ARGV[0]) || defined($ARGV[1])) {
	die $usage;
    }
    $cfgfile = $ARGV[0];
    if (defined $opt_h) {
	print $usage;
	exit 0;
    }
    if (defined($opt_m)) {
    	if ($opt_m < 1) {
	    die "max ports must be > 0\n";
	} else {
	    $max_ports = $opt_m;
	}
    }
    if (defined $opt_v) {
	select STDOUT;
	$| = 1;
    }

    # parse the bindport file
    #
    if (! open BINDPORT, "<$cfgfile") {
	die "cannot open bindport config file: $cfgfile: $!\n";
    }
    $i = 0;
    $ignored_tcp = 0;
    $ignored_udp = 0;
    while (defined($line = <BINDPORT>)) {

    	# ignore off comments and whitespace
	#
	++$i;
	chomp($line);
	$line =~ s/#.*//;
	$line =~ s/\s+$//;
	next if length($line) <= 0;

	# must be of the form {udp,tcp,reserve-udp,reserve-tcp}/portnum
	#
	if ($line !~ m{^(tcp|udp|reserve-udp|reserve-tcp)/(\d+)$}) {
	    die "syntax error on line: $i, see $0 -h for syntax\n";
	}
	$proto_arg = $1;
	if (! defined $proto_arg) {
	    die "syntax error on line: $i, unknown port type\n";
	}
	$port = $2;
	if (! defined $port || $port < 0 || $port > 65535) {
	    die "syntax error on line: $i, port must be in range [0,65535]\n";
	}

	# if -i, then silently ignore privileged ports <= 1023
	#
	if ($opt_i && $port <= 1023) {
	    if ($proto_arg =~ m{^tcp$}i) {
		++$ignored_tcp;
	    } elsif ($proto_arg =~ m{^udp$}i) {
		++$ignored_udp;
	    }
	    next;
	}

	# record entry
	#
	if ($proto_arg =~ m{^tcp$}i) {
	    $tcp{$port} = $port;
	} elsif ($proto_arg =~ m{^udp$}i) {
	    $udp{$port} = $port;
	} elsif ($proto_arg =~ m{^reserve-tcp$}i) {
	    $reserve_tcp{$port} = $port;
	} elsif ($proto_arg =~ m{^reserve-udp$}i) {
	    $reserve_udp{$port} = $port;
	} else {
	    die "unknown port time on line: $i\n";
	}
    }
    close BINDPORT;

    # object if attempting to bind to reserve ports
    #
    foreach $port (keys %reserve_tcp) {
	if (defined($tcp{$port})) {
	    die "found both tcp/$port and reserve-tcp/$port\n";
	}
    }
    foreach $port (keys %reserve_udp) {
	if (defined($udp{$port})) {
	    die "found both udp/$port and reserve-udp/$port\n";
	}
    }
    print "$0: " . (keys %tcp) . " tcp ports to bind\n" if defined $opt_v;
    print "$0: " . (keys %udp) . " udp ports to bind\n" if defined $opt_v;
    if ($opt_i) {
	print "$0: $ignored_tcp low tcp ports ignored\n" if defined $opt_v;
	print "$0: $ignored_udp low udp ports ignored\n" if defined $opt_v;
    }
    $total_ports = (keys %tcp) + (keys %udp);
    print "$0: will bind to $total_ports ports\n" if defined $opt_v;
    print "$0: each child bind up to $max_ports ports\n" if defined $opt_v;

    # turn off signals
    #
    if (defined $opt_s) {
	print "$0: ignoring almost all signals..." if defined $opt_v;
	sig_off();
	print "\n" if defined $opt_v;
    }

    # pre-close all files if requested
    #
    if (defined $opt_c) {

	# pre-close the standard big 3 descriptors
	#
	# We do not close STDOUT and STDERR if we also were given -v
	#
	print "$0: closing STDIN and fd 3 thru fd $max_ports\n" if $opt_v;
	POSIX::close(0);
	POSIX::close(1) unless defined $opt_v;
	POSIX::close(2) unless defined $opt_v;

	# close from 3 upward
	#
	for ($i=3; $i < $max_ports; ++$i) {
	    POSIX::close($i);
	}
    }

    # fork processes while we have ports to bind with
    #
    while ($total_ports > 0) {

	# select any tcp ports for child binding use
	#
	@tcp_set = ();
	$child_ports = 0;
	if ((keys %tcp) > 0) {

	    # collect up to max_ports tcp ports for the child to bind with
	    #
	    foreach $port (keys %tcp) {

		# if we more than enough ports for the child, stop collecting
		#
		last if ($child_ports >= $max_ports || $total_ports <= 0);

		# collect this port
		#
		push @tcp_set, $port;
		--$total_ports;
		++$child_ports;
		delete $tcp{$port};
	    }
	}
	print "$0: child will get " . scalar(@tcp_set) . " tcp ports\n" if
	    defined $opt_v;

	# if the child has room, also select udp ports for child binding use
	#
	@udp_set = ();
	if ((keys %udp) > 0 && $child_ports < $max_ports) {

	    # collect up to max_ports udp ports for the child to bind with
	    #
	    foreach $port (keys %udp) {

		# if we more than enough ports for the child, stop collecting
		#
		last if ($child_ports >= $max_ports || $total_ports <= 0);

		# collect this port
		#
		push @udp_set, $port;
		--$total_ports;
		++$child_ports;
		delete $udp{$port};
	    }
	}
	print "$0: child will get " . scalar(@udp_set) . " udp ports\n" if
	    defined $opt_v;
	if (scalar(@tcp_set) + scalar(@udp_set) < 1) {
	    die "attempt to give no ports to a child\n";
	}

	# fork child so it can bind to ports
	#
	$pid = fork;
	die "$0: cannot fork: $!\n" unless defined($pid);

	# child code
	#
	if ($pid == 0) {

	    # hold each tcp port
	    #
	    foreach $port (@tcp_set) {
		push(@sock, hold_port("tcp", $port));
	    }

	    # hold each udp port
	    #
	    foreach $port (@udp_set) {
		push(@sock, hold_port("udp", $port));
	    }

	    # sleep forever
	    #
	    select undef, undef, undef, undef;
	    # /*NOTREACHED*/ #
	}

	# parent code
	#
	print "$0: forked child $pid, $total_ports left to bind\n" if
	    defined $opt_v;
    }

    # All done!!! - Jessica Noll, Age 2
    #
    exit(0);
}


# sig_off - turn off all signals (that know of we can)
#
# NOTE: Some signals are not blockable.
#
sub sig_off()
{
    for my $sig (keys %SIG) {
	$SIG{$sig} = 'IGNORE';
    }
}


# hold_port - hold a port by binding to it
#
# usage:
#	$s = hold_port($proto, $port);
#
#	$proto		socket proto ("tcp" or "udp")
#	$port		port number
#
# returns:
#	IO::Socket::INET object
#
# NOTE: The $proto_arg is used for error message output only.
#
sub hold_port($$)
{
    my ($proto, $port) = @_;	# get args
    my $s;			# socket object

    # bind to the port
    #
    if ($proto eq "tcp") {
	$s = IO::Socket::INET->new(LocalPort => $port,
				   Proto => $proto,
				   Type => SOCK_STREAM,
				   Listen => 1,
				   Reuse => 1);
    } elsif ($proto eq "udp") {
	$s = IO::Socket::INET->new(LocalPort => $port,
				   Proto => $proto,
				   Type => SOCK_DGRAM,
				   Reuse => 1);
    } else {
	die "$0: unknown protocol name: $proto\n";
    }

    # save the socket
    #
    return $s;
}
